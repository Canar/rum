#!/usr/bin/env ruby
require 'open3'
require 'shellwords'
require 'io/console'
require 'pathname'
require 'pulseaudio_simple_fiddle'

Pkg,Ver='rumu','0.4.2'
ConfigDir="#{Dir.home}/.config/#{Pkg}"
Dir.mkdir(ConfigDir) unless File.directory?(ConfigDir)

Channels,Rate,WordSize=2,44100,4
FfmpegFmt="-ac #{Channels} -ar #{Rate} -f f#{WordSize*8}le"

class BasicO
	def write(buf) = buf == nil ? buf : @dev.write(buf)
	def close = @dev.close
end

class FfmpegPipeO < BasicO
	def initialize(device, channels: Channels, rate: Rate, wordsize: WordSize )
		device = device.to_s.chomp.length>0 ? device.to_s.chomp : '-f pulse default'
		@dev,@out,@err,@thr = Open3.popen3("ffmpeg -loglevel -8 #{FfmpegFmt} -i - #{device}")
		@out.close
		@err.close
	end
end

class ConfigO < BasicO
	def initialize file: ConfigDir+'/out'
		@mode,@devname=:pulse,nil
		if File.file?(file)
			cfg=File.read(file).split("\n")
			@mode=cfg[0].to_sym
			@devname=cfg[1].to_s.chomp.length>0 ? cfg[1] : nil
		end
		File.write(file,@mode.to_s+"\n"+@devname.to_s)
		@dev= :ffmpeg == @mode ? 
			FfmpegPipeO.new(@devname) : 
			PulseAudio::SimpleO.new(Pkg,'Music Playlist',channels:Channels,rate:Rate,device:@devname)
	end
end

def print_brand = print "\r    ]  #{Pkg} ✝ v#{Ver}  [    "

list,list_i,cycle,mode,ssoff,help=[],0,0,:load,'',''
if ARGV.length==0
	if File.file?("#{ConfigDir}/list")
		list=File.read("#{ConfigDir}/list").split("\n")
		if File.file?("#{ConfigDir}/pos")
			pos=File.read("#{ConfigDir}/pos").split("\n")
			list_i=pos[0].to_i
			cycle=pos[1].to_i
			cycle-=3 if cycle>3
			ssoff="-ss #{cycle} " if cycle>0
		end
	else
		puts "Usage: #{Pkg} files_to_play"
		exit 1
	end
else
	list=ARGV.map{|x| Pathname(x).realpath.to_s}
end
prefix=/\A(.*).*(\n\1.*)*\Z/.match(list.join("\n"))[1]
puts prefix

oo=ConfigO.new
bq=SizedQueue.new 4

iit=Thread.new {
	io,ie=nil,nil
	until :quit == mode
		if io and io.eof?
			list_i+=1
			mode=list_i>=list.count ? :quit : :load
		end
		if :load == mode
			[io,ie].each{|x|x.close} unless !io or io.closed?
			ii,io,ie,it = Open3.popen3 "ffmpeg -loglevel -8 -i #{Shellwords.escape(list[list_i])} #{ssoff} #{FfmpegFmt} -"
			ii.close
			cycle=0 unless ssoff.length > 0
                        puts "#{' '*help.length}\r#{list[list_i][prefix.length..-1]}" unless list[list_i].length == prefix.length
			ssoff,help,mode='','',:play
		end
		bq.push io.read(Channels*Rate*WordSize)
	end
	io.close
}

oot=Thread.new{
	until ( :quit == mode )
		if ! bq.empty?
			oo.write bq.pop
			cycle+=1
		else
			sleep rand
		end
	end
	oo.close
}

until :quit == mode
	print "\r#{cycle/60}:#{"%02d"%(cycle%60)} > "
	case ch=IO.console.raw{|c|c.read_nonblock(1) rescue ''}.downcase
	when 'n'
		list_i+=1
		mode= list_i<list.count ? :load : :quit
	when 'r'
		mode=:load
	when 'p'
		if list_i>0
			list_i-=1
			mode=:load
		end 
	when 's'
		print 'Seek to: '
		ti=(ts=IO.console.readline.chomp).split(':')
		ssoff="-ss #{ts}"
		cycle=(ti[-1].to_f + ti[-2].to_f*60 + ti[-3].to_f*60*60).to_i
		mode=:load
	when 'q'
		mode=:quit
		File.write(ConfigDir+'/list',list.join("\n"))
		File.write(ConfigDir+'/pos',list_i.to_s+"\n"+cycle.to_s)
		print_brand
	when ''
		sleep rand
	else
		print (help="#{ch} < #{list_i>0?"[P]rev ":""}[R]estart [S]eek [N]ext [Q]uit")
	end
end
oot.join
print_brand
puts

